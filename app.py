# -*- coding: utf-8 -*-
"""App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CvujllM-rR_SeUHnwWmdVt0zG5Hb0kV4
"""

!pip install streamlit

import streamlit as st
import tensorflow as tf
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load models
def load_model(model_name):
    return tf.keras.models.load_model(model_name)

# Preprocess image
def preprocess_image(image):
    image = image.resize((224, 224))  # Resize the image to model input size
    image = np.array(image) / 255.0  # Normalize the image
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    return image

# Prediction function
def predict(model, image):
    predictions = model.predict(image)
    class_index = np.argmax(predictions)
    return class_index, predictions

# Labels for your binary classification
labels = ['Diseased', 'Healthy']

# Streamlit app starts here
st.title("Cotton Disease Prediction Web App")
st.write("""
Welcome to the Cotton Disease Prediction Web App! You can upload an image of a cotton leaf and use different deep learning models to predict whether the leaf is **Diseased** or **Healthy**.
""")

# Sidebar options for navigation
st.sidebar.title("Navigation")
pages = ["Home", "Upload Image & Predict", "Model Performance", "Graphs"]
page_selection = st.sidebar.selectbox("Choose a page", pages)

if page_selection == "Home":
    st.header("Project Overview")
    st.write("""
    This project uses machine learning models to predict the health status of cotton plants based on images of leaves. The models available for prediction include:
    - **InceptionV3**
    - **EfficientNet**
    - **ResNet50**
    - **Custom CNN**

    Upload an image in the **Upload Image & Predict** section, select a model, and get the health prediction!
    """)

elif page_selection == "Upload Image & Predict":
    st.header("Upload an Image of a Cotton Leaf")
    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Preprocess the image
        preprocessed_image = preprocess_image(image)

        # Model selection
        st.sidebar.title("Select a Model")
        model_option = st.sidebar.selectbox("Choose a model",
                                            ("InceptionV3", "ResNet50", "EfficientNet", "Custom CNN"))

        # Load model
        if model_option == "InceptionV3":
            model = load_model("/content/model_0.h5")
        elif model_option == "ResNet50":
            model = load_model("/content/model_1.h5")
        elif model_option == "EfficientNet":
            model = load_model("/content/model_2.h5")
        else:
            model = load_model("/content/model_3.h5")

        # Predict button
        if st.sidebar.button("Predict"):
            class_index, predictions = predict(model, preprocessed_image)
            predicted_label = labels[class_index]
            st.write(f"Prediction: **{predicted_label}**")

            # Display prediction probabilities
            st.write("Prediction Probabilities:")
            prediction_df = pd.DataFrame(predictions, columns=labels)
            st.bar_chart(prediction_df.T)

elif page_selection == "Model Performance":
    st.header("Model Performance Comparison")

    # Add example performance data (you can replace this with real data)
    performance_data = {
        'Model': ['InceptionV3', 'ResNet50', 'EfficientNet', 'Custom CNN'],
        'Accuracy': [0.94, 0.93, 0.92, 0.91],  # Replace with actual data
        'Precision': [0.93, 0.92, 0.91, 0.90],
        'Recall': [0.94, 0.93, 0.92, 0.91],
        'F1-Score': [0.93, 0.92, 0.91, 0.90]
    }
    performance_df = pd.DataFrame(performance_data)

    st.table(performance_df)

elif page_selection == "Graphs":
    st.header("Accuracy and Loss Graphs")

    # Example data (replace with your real training history data)
    epochs = range(1, 21)
    accuracy = np.random.rand(20)  # Replace with real training accuracy
    val_accuracy = np.random.rand(20)  # Replace with real validation accuracy
    loss = np.random.rand(20)  # Replace with real training loss
    val_loss = np.random.rand(20)  # Replace with real validation loss

    # Plot Accuracy
    st.subheader(f"Model Accuracy - {model_option}")
    plt.plot(epochs, accuracy, label="Training Accuracy")
    plt.plot(epochs, val_accuracy, label="Validation Accuracy")
    plt.legend()
    st.pyplot(plt)

    # Plot Loss
    st.subheader(f"Model Loss - {model_option}")
    plt.plot(epochs, loss, label="Training Loss")
    plt.plot(epochs, val_loss, label="Validation Loss")
    plt.legend()
    st.pyplot(plt)